
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */

/**
 *
 * @author thoar
 */
public class BatailleDlg extends javax.swing.JDialog {

    
    private LesJoueurs lj; //collection des joueurs (en entrée)
    private int indj; //indice du joueur courant (en entrée)
    private Joueur adversaire; //adversaire sélectionné (en sortie)
    private boolean ok; // action faite ou non (en sortie)
    private Bataille b; // action réalisée
    
    
    //accesseurs des attributs
    public boolean isOk() { return ok; }
    public Joueur getAdversaire() { return adversaire; }
    public Bataille getBataille(){ return b;}
    
    /**
     * Creates new form BatailleDlg
     */
    
    //constructeur de la classe
    public BatailleDlg(java.awt.Frame parent, boolean modal, LesJoueurs lj, int jc) {
        
        super(parent, modal); //appel du constructeur de la classe mère, ici la JFrame
        initComponents();
        //Initialisation des attributs
        this.lj=lj;
        this.ok=false;
        this.indj=jc;
        
        //Modification du bouton Annuler et le rendre invisible
        Annuler.setText("Annuler");
        Annuler.setVisible(false);
        //Ajout de texte informatif
        MessageJ.setText(lj.getJoueur(indj).getPseudo()+" effectue une bataille contre :");
        initListe(); //remplit la liste des pseudos des joueurs         
    }
    
    //Méthode permettant de remplir la JList avec les pseudos des joueurs de la partie
    public void initListe(){
        
        DefaultListModel mod = new DefaultListModel(); //création d'un modèle
        //On ajout les pseudos des joueurs à ce modèle
        for (int i = 0; i < lj.getNbJoueurs(); i++) {
                mod.addElement(lj.getJoueur(i).getPseudo());
        }
        ListeJ.setModel(mod); //On applique ce modèle à la JList
        ListeJ.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); //Permet de n'autoriser qu'une seule sélection à la fois sur la JList
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        MessageJ = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListeJ = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Joueur = new javax.swing.JLabel();
        Adversaire = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        infosCarte1 = new javax.swing.JTextArea();
        Carte1 = new javax.swing.JButton();
        Carte2 = new javax.swing.JButton();
        Ic2 = new javax.swing.JScrollPane();
        infosCarte2 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        Vainqueur = new javax.swing.JLabel();
        Demarrer = new javax.swing.JButton();
        Annuler = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1100, 800));

        jPanel5.setLayout(new java.awt.GridLayout(1, 2));

        MessageJ.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MessageJ.setText("jLabel1");
        jPanel5.add(MessageJ);

        ListeJ.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListeJMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(ListeJ);

        jPanel5.add(jScrollPane2);

        getContentPane().add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        Joueur.setText("Joueur");
        jPanel2.add(Joueur);

        Adversaire.setText("Adversaire");
        jPanel2.add(Adversaire);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.GridLayout(1, 4));

        infosCarte1.setColumns(20);
        infosCarte1.setLineWrap(true);
        infosCarte1.setRows(5);
        infosCarte1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(infosCarte1);

        jPanel3.add(jScrollPane1);

        Carte1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/anonyme.png"))); // NOI18N
        jPanel3.add(Carte1);

        Carte2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/anonyme.png"))); // NOI18N
        jPanel3.add(Carte2);

        infosCarte2.setColumns(20);
        infosCarte2.setLineWrap(true);
        infosCarte2.setRows(5);
        infosCarte2.setWrapStyleWord(true);
        Ic2.setViewportView(infosCarte2);

        jPanel3.add(Ic2);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.GridLayout(1, 3));

        Vainqueur.setText("Vainqueur");
        jPanel4.add(Vainqueur);
        Vainqueur.getAccessibleContext().setAccessibleDescription("");

        Demarrer.setText("Démarrer");
        Demarrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DemarrerActionPerformed(evt);
            }
        });
        jPanel4.add(Demarrer);

        Annuler.setText("Annuler");
        Annuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnnulerActionPerformed(evt);
            }
        });
        jPanel4.add(Annuler);

        getContentPane().add(jPanel4, java.awt.BorderLayout.SOUTH);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ListeJMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListeJMouseClicked
        
        //Récupération du joueur courant et de l'indice de l'élément sélectionné dans la JList
        Joueur jc = lj.getJoueur(indj);
        int ind = ListeJ.getSelectedIndex();
         
        if(ind !=-1) //Si un élément est bien sélectionné
        {
            if(ind==indj) //Si le joueur sélectionné est le joueur courant
            {
                infosCarte1.setText("Selectionnez un autre joueur"); //Message d'erreur
            }
            else
            {
                this.adversaire=lj.getJoueur(ind); /*On récupère le joueur qui correspond à 
                                                    l'indice de l'élément sélectionné dans la JList,
                                                    qui correspondra à l'adversaire*/
                this.b=new Bataille(jc,this.adversaire); //Création d'une instance de Bataille entre le joueur courant et l'adversaire
                
                //Affichage du bouton annuler
                Annuler.setVisible(true);
                
                //Afficher les pseudos du joueur courant et de son adversaire dans les labels « Joueur » et « Adversaire »
                Joueur.setText(jc.getPseudo());
                Adversaire.setText(this.adversaire.getPseudo());
                
                //Afficher le contenu du paquet de chacun des joueurs dans les zones d’édition « InfosCarte1 » et «InfosCarte2».
                infosCarte1.setText(jc.getPaquet().toString());
                infosCarte2.setText(this.adversaire.getPaquet().toString());
            }
        }
    }//GEN-LAST:event_ListeJMouseClicked

    private void DemarrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DemarrerActionPerformed
        
        //Récupération du joueur courant grâce à son indice
        Joueur j = lj.getJoueur(indj);
        
        //Si le joueur courant et l'adversaire sont bien définis
        if(j!=null && this.adversaire!=null)
        {
            //Stockage des paquets des joueurs dans des variables
            LesPersonnages pj = j.getPaquet();
            LesPersonnages pa = this.adversaire.getPaquet();
            
            //Si les 2 joueurs ont encore des cartes
            if(pj.getTaille()>0 && pa.getTaille()>0)
            {
                //Afficher le personnage joué (1er personnage du paquet du joueur), pour chaque joueur dans les zones d’édition « InfosCarte1 » et « InfosCarte2 »,
                infosCarte1.append("\n"+"Le joueur "+j.getPseudo()+" joue la carte "+j.getPaquet().getPerso(0));
                infosCarte2.append("\n"+"Le joueur "+adversaire.getPseudo()+" joue la carte "+adversaire.getPaquet().getPerso(0));
                
                //selon la valeur de retour de cette méthode, afficher le pseudo du gagnant ou du perdant (ou de l’absence de
                //ceux-ci en cas de match nul), ainsi que l’affichage du nouveau contenu des paquets de chacun des joueurs
                //dans les zones d’édition « InfosCarte1 » et « InfosCarte2 »
                
                //Affihage de la photo du premier personnage de chaque joueur sur les boutons
                pj.getPerso(0).setImgBouton(Carte1);
                pa.getPerso(0).setImgBouton(Carte2);
                this.ok=true; //booléen à true car la bataille a bien eu lieu
                
                
                int res = this.b.execute();//appel de la méthode execute de Bataille

                if(res==0){
                    infosCarte1.append("\nEgalité");//égalité
                    infosCarte2.append("\nEgalité");
                }
                else if(res==1){
                   infosCarte1.append("\n"+j.getPseudo()+" gagne.");//Le joueur courant gagne
                   infosCarte2.append("\n"+adversaire.getPseudo()+" perd.");
                }
                else if(res==2){
                    infosCarte1.append("\n"+j.getPseudo()+" perd.");//L'adversaire gagne
                    infosCarte2.append("\n"+adversaire.getPseudo()+" gagne.");
                }
                
                //Affichage des informations des paquets des joueurs dans les zones correspondantes
                infosCarte1.append("\n\n"+pj.toString());
                infosCarte2.append("\n\n"+pa.toString());
                
                if(res==0)
                {
                    Vainqueur.setText("Egalité"); //Si le résultat est égal à 0, c'est qu'il y a eu égalité
                }
                else if(res==1){
                    Vainqueur.setText(j.getPseudo()); //Si le résultat est égal à 1, c'est le joueur courant qui a gagné
                }
                else if(res==2)
                {
                    Vainqueur.setText(this.adversaire.getPseudo()); //Si le résultat est égal à 2, c'est l'adversaire qui a gagné
                }
               
                //Si l'un des deux joueurs a un paquet vide, la bataille est terminée et le joueur ayant encore des cartes a gagné
                if(pj.getTaille()==0)
                {
                    Vainqueur.setText("Vainqueur final : "+this.adversaire.getPseudo());
                    this.Demarrer.setEnabled(false);
                    Annuler.setText("Fermer");
                }
                else if (pa.getTaille()==0){
                    Vainqueur.setText("Vainqueur final : "+j.getPseudo());
                    this.Demarrer.setEnabled(false);
                    Annuler.setText("Fermer");
                }   
            }
            //Si l'un des deux joueurs a un paquet vide, on désactive le bouton Démarrer et on change le bouton Annuler en Fermer
            else{
                this.Demarrer.setEnabled(false);
                Annuler.setText("Fermer");
                }
        }
    }//GEN-LAST:event_DemarrerActionPerformed

    //Au click sur le bouton Annuler on met ok à false et on ferme la fenétre
    private void AnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnnulerActionPerformed
       
            this.setVisible(false);
    }//GEN-LAST:event_AnnulerActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BatailleDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BatailleDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BatailleDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BatailleDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BatailleDlg dialog = new BatailleDlg(new javax.swing.JFrame(), true,null,-1);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Adversaire;
    private javax.swing.JButton Annuler;
    private javax.swing.JButton Carte1;
    private javax.swing.JButton Carte2;
    private javax.swing.JButton Demarrer;
    private javax.swing.JScrollPane Ic2;
    private javax.swing.JLabel Joueur;
    private javax.swing.JList<String> ListeJ;
    private javax.swing.JLabel MessageJ;
    private javax.swing.JLabel Vainqueur;
    private javax.swing.JTextArea infosCarte1;
    private javax.swing.JTextArea infosCarte2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
